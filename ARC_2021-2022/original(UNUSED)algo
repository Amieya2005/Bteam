import math
import numpy as np
waypoint = []
order = [0, 1, 2, 3, 4]


def determinePath(waypoint):
    Lat0 = (waypoint['latitude'][0])
    Lon0 = (waypoint['longitude'][0])
    Alt0 = (waypoint['altitude'][0])

    Lat1 = float(waypoint['latitude'][1])
    Lon1 = float(waypoint['longitude'][1])
    Alt1 = float(waypoint['altitude'][1])

    Lat2 = float(waypoint['latitude'][2])
    Lon2 = float(waypoint['longitude'][2])
    Alt2 = float(waypoint['altitude'][2])
    waypointC = [Lat2, Lon2, Alt2]

    Lat3 = float(waypoint['latitude'][3])
    Lon3 = float(waypoint['longitude'][3])
    Alt3 = float(waypoint['altitude'][3])

    Lat4 = float(waypoint['latitude'][4])
    Lon4 = float(waypoint['longitude'][4])
    Alt4 = float(waypoint['altitude'][4])

    waypointH = np.array((Lat0, Lon0, Alt0))
    waypointA = np.array((Lat1, Lon1, Alt1))
    waypointC = np.array((Lat2, Lon2, Alt2))
    waypointB = np.array((Lat3, Lon3, Alt3))
    waypointA2 = np.array((Lat4, Lon4, Alt4))

#-----------------------------------------------------------------------------
    #FIRST POINT
    distanceHtoA = np.linalg.norm(waypointH - waypointA)
    distanceHtoC = np.linalg.norm(waypointH - waypointC)
    distanceHtoB = np.linalg.norm(waypointH - waypointB)
    distanceHtoA2 = np.linalg.norm(waypointH - waypointA2)
    Distances = [distanceHtoA, distanceHtoC, distanceHtoB, distanceHtoA2]
    UminimumDistance = min(Distances)
    #P1 = "distanceHtoB: ", UminimumDistance
    #ssprint("distanceHtoA: ", distanceHtoA)
    #print("distanceHtoC: ", distanceHtoC)
    #print("distanceHtoB: ", distanceHtoB)
    #print("distanceHtoA2: ", distanceHtoA2)
    #print("HtoB", UminimumDistance)

    #U=latin for 1
    #Arranged = np.array([[distanceHtoA, distanceHtoC,distanceHtoB, distanceHtoA2]])
    #print(np.sort(Arranged))
    #------------------------------------------------------------------------
    #SECOND POINT
    distanceBtoA = np.linalg.norm(waypointB-waypointA)
    distanceBtoC = np.linalg.norm(waypointB-waypointC)
    distanceBtoA2 = np.linalg.norm(waypointB-waypointA2)
    Distances2 = [distanceBtoA, distanceBtoC, distanceBtoA2]
    SminimumDistance = min(Distances2)
    P2 = SminimumDistance

    print("distanceBtoA: ", distanceBtoA)
    print("distanceBtoC: ", distanceBtoC)
    print("distanceBtoA2: ", distanceBtoA2)

    print("distanceBtoA2", SminimumDistance)

    #------------------------------------------------------------------------
    #THIRD POINT
    distanceA2toA = np.linalg.norm(waypointA2-waypointA)
    distanceA2toC = np.linalg.norm(waypointA2-waypointC)
    Distances3 = [distanceA2toA, distanceA2toC]
    TminimumDistance = min(Distances3)
    P3 = TminimumDistance
    print("distanceA2toA: ", distanceA2toA)
    print("distanceA2toC: ", distanceA2toC)

    print("distanceA2toC", TminimumDistance)

    #------------------------------------------------------------------------
    #FOURTH waypoint
    distanceCtoA = np.linalg.norm(waypointC-waypointA)
    Distances4 = [distanceCtoA]
    FminimumDistance = Distances4
    P4 = FminimumDistance
    print("distanceCtoA: ", distanceCtoA)

    print("distanceCtoA", FminimumDistance)

    #-------------------------------------------------------------------------
    return order

    #closestWaypoint = Distances.index(minimumDistance)
    #Path = Path.append(closestWaypoint)


#PLACEHOLDER, just send out current list2


#print(order)
#for inx1 in range(0, len(order)):

#	small_Num = order[idx1]
#	print(small_Num)

#	for idx2 in range(idx1+1, len(order)):

#		if (order[idx2] < order[idx1]):
#			tmp = order[idx1]
#			order[idx1] = order[idx2]
#			order[idx2] = tmp

#order.sort(reversed=False)


#print(order)


#return Path
#if __name__ == '__main__':
#	main()
